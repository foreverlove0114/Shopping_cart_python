pipeline {
    agent any

    parameters {
        choice(
            name: 'BASE_URL',
            choices: ['http://localhost:5000', 'http://staging.example.com', 'http://prod.example.com'],
            description: 'Target environment for Python tests'
        )
        string(
            name: 'PYTEST_TIMEOUT',
            defaultValue: '30',
            description: 'Pytest timeout in seconds'
        )
        booleanParam(
            name: 'RUN_E2E_TESTS',
            defaultValue: true,
            description: 'Run end-to-end Selenium tests'
        )
    }

    environment {
        BASE_URL = "${params.BASE_URL}"
        PYTEST_TIMEOUT = "${params.PYTEST_TIMEOUT}"
        RUN_E2E_TESTS = "${params.RUN_E2E_TESTS}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'master',
                    url: 'https://github.com/foreverlove0114/Shopping_cart_python.git'
                echo "✅ 代码检出完成"
            }
        }

        stage('Verify Python') {
            steps {
                bat 'python --version'
                bat 'pip --version'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo "📦 安装Python依赖包..."

                    bat '''
                        if exist requirement.txt (
                            echo "找到 requirement.txt，安装依赖..."
                            pip install -r requirement.txt
                        ) else (
                            echo "未找到 requirement.txt，单独安装依赖包..."
                            pip install pytest pytest-html pytest-timeout requests beautifulsoup4 selenium webdriver-manager python-dotenv
                        )
                    '''

                    bat 'pip list | findstr pytest'
                }
            }
        }

        stage('API Tests') {
            steps {
                script {
                    echo "🔌 开始API测试..."
                    echo "🎯 测试环境: ${BASE_URL}"

                    // 查找所有测试文件
                    bat 'dir /s /b test_*.py > test_files.txt || echo "正在查找测试文件..."'
                    bat 'type test_files.txt || echo "未找到测试文件"'

                    // 运行所有发现的测试
                    bat """
                        python -m pytest tests/ -v \
                        --html=api_test_report.html \
                        --self-contained-html \
                        --timeout=${PYTEST_TIMEOUT}
                    """
                }
            }
        }
            post {
                always {
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'api_test_report.html',
                        reportName: 'Python API Test Report'
                    ])
                }
            }
        }

        stage('E2E Tests') {
            when {
                expression { return env.RUN_E2E_TESTS == 'true' }
            }
            steps {
                script {
                    echo "🎨 开始E2E测试..."
                    echo "🎯 测试环境: ${BASE_URL}"

                    // 查找E2E测试文件
                    bat 'dir /s /b *end_to_end*.py > e2e_files.txt || echo "正在查找E2E测试文件..."'
                    bat 'type e2e_files.txt || echo "未找到E2E测试文件"'

                    bat """
                        set BASE_URL=${BASE_URL}
                        python -m pytest pytest_Selenium/ -v \
                        --html=e2e_test_report.html \
                        --self-contained-html \
                        --timeout=60
                    """
                }
            }
        }
            post {
                always {
                    publishHTML([
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'e2e_test_report.html',
                        reportName: 'Python E2E Test Report'
                    ])
                }
            }
        }
    }

    post {
        always {
            echo "🏁 Python测试流水线执行完成"
        }
        success {
            echo "🎉 所有Python测试通过！"
        }
        failure {
            echo "❌ 部分测试失败，请检查报告"
        }
    }
}